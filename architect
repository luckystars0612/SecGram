project/
├── services/
│   ├── bot_service/            # Handles Telegram bot interactions
│   │   ├── handlers.py         # Command and message handlers
│   │   ├── commands.py         # Bot-specific commands
│   │   └── main.py             # Bot entry point
│   ├── scraper_service/
│   │   ├── main.py
│   │   ├── account_manager.py
│   │   ├── utils/
│   │   │   ├── __init__.py
│   │   │   ├── db_utils.py
│   │   │   └── email_utils.py
│   │   ├── requirements.txt
│   │   └── Dockerfile        # Scraper settings
│   ├── api_service/            # Manages external API calls
│   │   ├── chatgpt_api.py      # ChatGPT integration
│   │   └── config.py           # API credentials
│   ├── filehandler_service/    # Processes large files
│   │   ├── zip_extractor.py    # Extracts ZIP files
│   │   └── config.py           # File handling settings
│   ├── db_service/             # Optional database storage
│   │   ├── models.py           # Data models (e.g., SQLAlchemy)
│   │   ├── database.py         # Database connection and logic
│   │   └── config.py           # Database settings
│   ├── search_service/         # Handles automatic searching
│   │   ├── base_search.py      # Abstract search interface
│   │   ├── scheduled_search.py # Scheduled search logic
│   │   └── ai_search.py        # Placeholder for AI bot
│   └── message_broker/         # Facilitates service communication
├── config/                     # Global settings
│   ├── settings.py             # Configuration (e.g., USE_DATABASE)
│   └── logger.py               # Logging setup
├── resources/                  # Static resources
|   ├── sessions/
│   |   ├── account1.session
│   |   ├── account2.session
│   |   └── account3.session
│   ├── accounts.json
|   |── channels.json
│   └── darkweb_links.txt       # Initial dark web links
├── docker-compose.yml          # Containerizes services
└── run.py                      # Orchestrates startup

- Services: Each is a standalone module, deployable via Docker for consistency.
- Message Broker: Ensures decoupled communication between services.
- Configuration: Centralizes settings like USE_DATABASE for easy customization.
- Resources: Stores initial data sources, editable or expandable via the Search Service.